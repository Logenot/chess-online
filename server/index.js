// server.js
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');

const app = express();

// –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–¥–æ–º–µ–Ω
const allowedOrigin = 'https://chess-online-one.vercel.app';
app.use(cors({ origin: allowedOrigin, methods: ['GET','POST'], credentials: true }));

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: allowedOrigin,
    methods: ['GET','POST'],
    credentials: true,
  },
});

// ---- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----
const rooms = {};
const leaderboard = {};
const waitingPlayers = new Map(); // ID —Å–æ–∫–µ—Ç–∞ -> –Ω–∏–∫–Ω–µ–π–º

function recordResult(winner, loser) {
  [winner, loser].forEach(nick => {
    if (!leaderboard[nick]) {
      leaderboard[nick] = { wins: 0, totalGames: 0 };
    }
    leaderboard[nick].totalGames += 1;
  });
  leaderboard[winner].wins += 1;
}

// ---- REST –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Leaderboard ----
app.get('/leaderboard', (req, res) => {
  const data = Object.keys(leaderboard).map(nick => {
    const stats = leaderboard[nick];
    return {
      nickname: nick,
      wins: stats.wins,
      totalGames: stats.totalGames,
    };
  });
  data.sort((a, b) => b.wins - a.wins);
  res.json(data);
});

// ---- WebSocket –ª–æ–≥–∏–∫–∞ ----
io.on('connection', (socket) => {
  console.log('üë§ New user connected:', socket.id);

  socket.on('joinRoom', ({ roomId, nickname }) => {
    socket.data.nickname = nickname;

    if (!rooms[roomId]) rooms[roomId] = [];
    rooms[roomId].push({ id: socket.id, nickname });
    socket.join(roomId);

    console.log(`üì• ${socket.id} (${nickname}) joined room ${roomId}`);
    io.to(roomId).emit('roomUpdate', {
      players: rooms[roomId],
    });
  });

  socket.on('findOpponent', ({ nickname }) => {
    socket.data.nickname = nickname;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∏–≥—Ä–æ–∫–∏
    if (waitingPlayers.size > 0) {
      // –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –æ–∂–∏–¥–∞—é—â–µ–≥–æ
      const [opponentId, opponentNick] = waitingPlayers.entries().next().value;
      waitingPlayers.delete(opponentId);
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
      const roomId = `auto_${Date.now()}`;
      rooms[roomId] = [
        { id: opponentId, nickname: opponentNick },
        { id: socket.id, nickname }
      ];
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      const opponentSocket = io.sockets.sockets.get(opponentId);
      opponentSocket.join(roomId);
      socket.join(roomId);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
      io.to(opponentId).emit('joinAutoRoom', roomId);
      socket.emit('joinAutoRoom', roomId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
      io.to(roomId).emit('roomUpdate', {
        players: rooms[roomId],
      });
      
      console.log(`ü§ù Created auto room ${roomId} for ${nickname} and ${opponentNick}`);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
      waitingPlayers.set(socket.id, nickname);
      console.log(`‚è≥ Player ${nickname} added to waiting queue`);
    }
  });

  socket.on('cancelSearch', () => {
    if (waitingPlayers.has(socket.id)) {
      const nickname = waitingPlayers.get(socket.id);
      waitingPlayers.delete(socket.id);
      console.log(`‚ùå ${nickname} canceled search`);
    }
  });

  socket.on('move', ({ roomId, move }) => {
    console.log(`‚ôü Move in room ${roomId}:`, move);
    socket.to(roomId).emit('move', move);
  });

  socket.on('gameOver', ({ roomId, winner, loser }) => {
    console.log(`üèÅ Game over in room ${roomId}. Winner: ${winner}, Loser: ${loser}`);
    recordResult(winner, loser);
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    if (rooms[roomId]) {
      delete rooms[roomId];
      console.log(`üóë Room ${roomId} deleted after game over`);
    }
  });

  socket.on('disconnect', () => {
    console.log('‚ùå User disconnected:', socket.id);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    if (waitingPlayers.has(socket.id)) {
      const nickname = waitingPlayers.get(socket.id);
      waitingPlayers.delete(socket.id);
      console.log(`üöÆ ${nickname} removed from waiting queue (disconnected)`);
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–Ω–∞—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    for (const roomId in rooms) {
      const roomPlayers = rooms[roomId];
      const playerIndex = roomPlayers.findIndex(player => player.id === socket.id);
      
      if (playerIndex !== -1) {
        const nickname = roomPlayers[playerIndex].nickname;
        rooms[roomId] = roomPlayers.filter(player => player.id !== socket.id);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
        io.to(roomId).emit('roomUpdate', {
          players: rooms[roomId],
        });
        
        console.log(`üö™ ${nickname} left room ${roomId} (disconnected)`);
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è 1 –∏–≥—Ä–æ–∫
        if (rooms[roomId].length < 2) {
          delete rooms[roomId];
          console.log(`üóë Room ${roomId} deleted (not enough players)`);
        }
      }
    }
  });
});

// ---- –ó–∞–ø—É—Å–∫ ----
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ Server listening on port ${PORT}`);
});